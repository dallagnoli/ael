#!/bin/sh -e

RC="\033[0m"
RED="\033[31m"
YELLOW="\033[33m"
CYAN="\033[36m"
GREEN="\033[32m"

iso_check() {
    if [ ! -f /run/archiso/bootmnt/arch/x86_64/airootfs.sfs ]; then
        printf "%b\n" "${RED}ArchAEL must be run from an Arch Linux live ISO environment.${RC}" >&2
        exit 1
    fi
}

uefi_check() {
    if [ -f /sys/firmware/efi/fw_platform_size ]; then
        UEFI_BITNESS=$(cat /sys/firmware/efi/fw_platform_size)
        case "${UEFI_BITNESS}" in
        64)
            # UEFI 64-bit: OK
            ;;
        *) 
            printf "%b\n" "${RED}ArchAEL only supports UEFI 64-bit mode.${RC}" >&2
            exit 1
            ;;
        esac
    else
        printf "%b\n" "${RED}ArchAEL only supports UEFI 64-bit mode.${RC}" >&2
        exit 1
    fi
}

root_check() {
    if [ $(id -u) -ne 0 ]; then
        printf "%b\n" "${RED}ArchAEL must be run as root.${RC}" >&2
        exit 1
    fi
}

pacman_check() {
    # Remove database lock if pacman is not running
    if [ -f /var/lib/pacman/db.lck ]; then
        if pgrep -x pacman >/dev/null 2>&1; then
            printf "%b\n" "${RED}An instance of pacman is running.${RC}" >&2
            exit 1
        else
            rm -f /var/lib/pacman/db.lck
        fi
    fi

    # Ensure pacman keyring is initialized and populated
    pacman-key --init >/dev/null 2>&1
    pacman-key --populate archlinux >/dev/null 2>&1

    # Update keyring to latest version
    pacman -Sy --noconfirm --needed archlinux-keyring >/dev/null 2>&1 || {
        printf "%b\n" "${RED}Failed to update Arch Linux keyring.${RC}" >&2
        exit 1
    }
}

fzf_check() {
    if ! command -v fzf >/dev/null 2>&1; then
        pacman -S --noconfirm --needed fzf >/dev/null 2>&1 || {
            printf "%b\n" "${RED}Failed to install fuzzy finder.${RC}" >&2
            exit 1
        }
    fi
}

launch_functions() {
    iso_check
    uefi_check
    root_check
    pacman_check
    fzf_check
}

font() {
    setfont ter-v18b
}

selection() {
    printf "%b\n" "$options" | fzf --prompt "$prompt"
}

disk() {
    options=$(lsblk -dn -o NAME,SIZE,TYPE,TRAN | awk '$3 == "disk" && $4 != "usb" && $1 !~ /^(loop|ram|sr|fd)/ {printf "/dev/%s (%s)\n", $1, $2}')
    prompt="Select a disk: "

    selected=$(selection)
    DISK=$(printf '%s' "$selected" | cut -d' ' -f1)
}

region() {
    options=$(curl -fs http://bin.christitus.com/raw/dalopenori)
    prompt="Select your country: "
    COUNTRY=$(selection)

    case "$COUNTRY" in
        "Brazil")
            LOCALE="pt_BR.UTF-8"
            ;;
        "United States")
            LOCALE="en_US.UTF-8"
            ;;
        *)
            options=$(awk '{ sub(/^#/, ""); if ($1 ~ /\.UTF-8$/) print $1 }' /etc/locale.gen)
            prompt="Select your language: "
            LOCALE=$(selection)
            ;;
    esac

    LOCALE_LONG="${LOCALE} UTF-8"

    options=$(awk '/^[^#]/ { print $3 }' /usr/share/zoneinfo/zone.tab)
    prompt="Select your timezone: "
    TIMEZONE=$(selection)

    options=$(localectl list-keymaps)
    prompt="Select your layout: "
    KEYMAP=$(selection)
    
    IFS=-; set -- $KEYMAP
    KEYPT1=$1
    KEYPT2=$2

    printf "\nFetching fastest mirrors for %s...\n" "$COUNTRY"
    reflector --country "$COUNTRY" --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
}

user() {
    while :; do 
        printf "\nEnter your username: " 

        read -r username_input
        username_input=$(printf '%s' "$username_input" | xargs)
        username_raw=$(printf '%s' "$username_input" | tr '[:upper:]' '[:lower:]')

        if [ "$username_raw" != "root" ] && printf '%s' "$username_raw" | grep -Eq '^[a-z_][a-z0-9_-]{0,31}$'; then
            USERNAME="$username_input"
            break
        else
            printf "Invalid username. Try again.\n"
        fi
    done

    while :; do
        printf "\nEnter your password: "
        stty -echo
        read -r password_input1
        stty echo

        printf "\nRe-enter your password: "
        stty -echo
        read -r password_input2
        stty echo

        if [ "$password_input1" != "$password_input2" ]; then
            printf "\nPasswords don't match. Try again.\n"
        elif [ "$password_input1" = "$password_input2" ] && [ -n "$password_input1" ]; then
            PASSWORD="$password_input1"
            break
        else
            printf "\nInvalid password. Try again.\n"
        fi
    done

    while :; do
        printf "\n\nName your machine: "

        read -r hostname_input
        hostname_input=$(printf '%s' "$hostname_input" | xargs)
        hostname_raw=$(printf '%s' "$hostname_input" | tr '[:upper:]' '[:lower:]')

        if printf '%s' "$hostname_raw" | grep -Eq '^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$'; then
            HOSTNAME="$hostname_input"
            break
        else
            printf "Invalid hostname. Try again."
        fi
    done
}

launch_functions
font
user
disk
region
clear

printf "
==========================================
            Formatting Disk
==========================================\n"

sgdisk -Z "$DISK"
sgdisk -a 2048 -o "$DISK"

sgdisk -n 1::+1G --typecode=1:ef00 --change-name=1:'EFI System' "$DISK"
sgdisk -n 2::-0 --typecode=2:8300 --change-name=2:'Linux Root' "$DISK"

partprobe "$DISK"

printf "
==========================================
           Creating Filesystem
==========================================\n"

if [ "$DISK" =~ "nvme" ]; then
    part1=${DISK}p1
    part2=${DISK}p2
else
    part1=${DISK}1
    part2=${DISK}2
fi

mkfs.fat -F 32 "$part1"
mkfs.ext4 "$part2"

mount "$part2" /mnt
mount --mkdir "$part1" /mnt/boot

printf "
==========================================
          Installing Base System
==========================================\n"

pacstrap -K /mnt base base-devel linux-lts linux-firmware
genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt /bin/bash <<EOF

sed -i 's/^#\?ParallelDownloads = .*/ParallelDownloads = 10/' /etc/pacman.conf
sed -i 's/^#Color/Color\nILoveCandy/' /etc/pacman.conf
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
pacman -Sy --noconfirm --needed

printf "
==========================================
              Network Setup
==========================================\n"

pacman -S --noconfirm --needed networkmanager 
systemctl enable NetworkManager

printf "
==========================================
              Locale Setup
==========================================\n"

sed -i "s/^#${LOCALE_LONG}/${LOCALE_LONG}/" /etc/locale.gen
locale-gen
printf "LANG=%s\n" "${LOCALE}" > /etc/locale.conf

ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
hwclock --systohc

printf "KEYMAP=%s\n" "${KEYMAP}" > /etc/vconsole.conf

mkdir -p /etc/X11/xorg.conf.d
if [ -n "${KEYPT2}" ]; then
    printf 'Section "InputClass"\n\tIdentifier "system-keyboard"\n\tMatchIsKeyboard "on"\n\tOption "XkbLayout" "%s"\n\tOption "XkbModel" "%s"\nEndSection\n' "${KEYPT1}" "${KEYPT2}" > /etc/X11/xorg.conf.d/00-keyboard.conf
else 
    printf 'Section "InputClass"\n\tIdentifier "system-keyboard"\n\tMatchIsKeyboard "on"\n\tOption "XkbLayout" "%s"\nEndSection\n' "${KEYPT1}" > /etc/X11/xorg.conf.d/00-keyboard.conf
fi

printf "
==========================================
            Microcode Install
==========================================\n"

if grep -q "GenuineIntel" /proc/cpuinfo; then
    pacman -S --noconfirm --needed intel-ucode
elif grep -q "AuthenticAMD" /proc/cpuinfo; then
    pacman -S --noconfirm --needed amd-ucode
fi

printf "
==========================================
           User Configuration
==========================================\n"

useradd -m -G wheel -s /bin/bash "${USERNAME}"
printf '%s:%s\n' "${USERNAME}" "${PASSWORD}" | chpasswd
printf '%s\n' "${HOSTNAME}" > /etc/hostname
sed -i 's/^# *%wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers

printf "
==========================================
           Bootloader Setup
==========================================\n"

pacman -S --noconfirm --needed grub efibootmgr
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=AEL
grub-mkconfig -o /boot/grub/grub.cfg
EOF