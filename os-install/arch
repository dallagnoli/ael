#!/bin/sh -e

# AEL Installer for Arch Linux

logo() {
    printf "
==========================================
        __              __   __   _
       /  )        /   /  ) /   _//
      /--/ __  _. /_  /--/ /--  /  
     /  (_/ (_(__/ /_/  (_(___,/___

==========================================
        Arch Linux AEL Installer
==========================================\n"
}

verify_efi() {
    if [ -f /sys/firmware/efi/fw_platform_size ]; then
        EFI_BITS=$(cat /sys/firmware/efi/fw_platform_size)

        if [ "$EFI_BITS" -eq 64 ]; then
            BOOT="UEFI 64"
        elif [ "$EFI_BITS" -eq 32 ]; then
            BOOT="UEFI 32"
        else
            printf "ERROR: Unknown EFI platform size detected.\n" >&2
            exit 1
        fi

    else
        BOOT="BIOS"
    fi
}

verify_root() {
    if [ $(id -u) -ne 0 ]; then
        printf "ERROR: This script must be run as root.\n" >&2
        exit 1
    fi
}

verify_fzf() {
    if ! command -v fzf >/dev/null 2>&1; then
        pacman -Sy --noconfirm fzf >/dev/null 2>&1 || {
            printf "ERROR: Could not install fzf. Check your ethernet connection.\n" >&2
            exit 1
        }
    fi
}

verify_pacman() {
    if [ -f /var/lib/pacman/db.lck ]; then
        if pgrep -x pacman >/dev/null 2>&1; then
            printf "ERROR: Pacman is currently running. Close it before proceeding.\n" >&2
            exit 1
        else
            rm -f /var/lib/pacman/db.lck
        fi
    fi
}

verify_iso() {
    if [ ! -f /run/archiso/bootmnt/arch/x86_64/airootfs.sfs ]; then
        printf "ERROR: This script must be run from an Arch Linux installation ISO.\n" >&2
        exit 1
    fi
}

verify() {
    verify_iso
    verify_efi
    verify_root
    verify_pacman
    verify_fzf
}

selection() {
    printf '%b\n' "$options" | fzf --prompt "$prompt"
}

disk() {
    options=$(lsblk -dn -o NAME,SIZE,TYPE,TRAN | awk '$3 == "disk" && $4 != "usb" && $1 !~ /^(loop|ram|sr|fd)/ {printf "/dev/%s (%s)\n", $1, $2}')
    prompt="Select a disk: "

    selected=$(selection)
    DISK=$(printf '%s' "$selected" | cut -d' ' -f1)
}

region() {
    echo "nameserver 1.1.1.1" > /etc/resolv.conf

    TIMEZONE=$(curl -fs https://ipapi.co/timezone 2>/dev/null || TIMEZONE=$(awk '/^[^#]/ { print $3 }' /usr/share/zoneinfo/zone.tab | fzf --prompt="Select your timezone: ") || echo "UTC")
    COUNTRY=$(curl -fs https://ipapi.co/country_name 2>/dev/null || COUNTRY=$(curl -fs http://bin.christitus.com/raw/dalopenori 2>/dev/null | fzf --prompt="Select your country: ") || echo "United States")

    case "$COUNTRY" in
        "Brazil")
            LOCALE="pt_BR.UTF-8"
            ;;
        "United States")
            LOCALE="en_US.UTF-8"
            ;;
        *)
            options=$(awk '{ sub(/^#/, ""); if ($1 ~ /\.UTF-8$/) print $1 }' /etc/locale.gen)
            prompt="Select your language: "
            LOCALE=$(selection)
            ;;
    esac

    options=$(localectl list-keymaps)
    prompt="Select your layout: "
    KEYMAP=$(selection)

    printf "\nFetching fastest mirrors for %s...\n" "$COUNTRY"
    reflector --country "$COUNTRY" --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist > /dev/null 2>&1
}

user() {
    while :; do 
        printf "\nEnter your username: " 

        read -r username_input
        username_input=$(printf '%s' "$username_input" | xargs)
        username_raw=$(printf '%s' "$username_input" | tr '[:upper:]' '[:lower:]')

        if [ "$username_raw" != "root" ] && printf '%s' "$username_raw" | grep -Eq '^[a-z_][a-z0-9_-]{0,31}$'; then
            USERNAME="$username_input"
            break
        else
            printf "Invalid username. Try again.\n"
        fi
    done

    while :; do
        printf "\nEnter your password: "
        stty -echo
        read -r password_input1
        stty echo

        printf "\nRe-enter your password: "
        stty -echo
        read -r password_input2
        stty echo

        if [ "$password_input1" != "$password_input2" ]; then
            printf "\nPasswords don't match. Try again.\n"
        elif [ "$password_input1" = "$password_input2" ] && [ -n "$password_input1" ]; then
            PASSWORD="$password_input1"
            break
        else
            printf "\nInvalid password. Try again.\n"
        fi
    done

    while :; do
        printf "\n\nName your machine: "

        read -r hostname_input
        hostname_input=$(printf '%s' "$hostname_input" | xargs)
        hostname_raw=$(printf '%s' "$hostname_input" | tr '[:upper:]' '[:lower:]')

        if printf '%s' "$hostname_raw" | grep -Eq '^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$'; then
            HOSTNAME="$hostname_input"
            break
        else
            printf "Invalid hostname. Try again."
        fi
    done
}

logo
user
disk
region